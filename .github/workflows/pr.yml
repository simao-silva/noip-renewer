name: build and scan image

on:
  workflow_call:
    inputs:
      variant:
        required: true
        type: string
      dockerfile:
        required: true
        type: string

env:
  IMAGE_NAME: "simaofsilva/noip-renewer"

jobs:
  build-image:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Build image for tests
        uses: docker/build-push-action@v6.17.0
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: ${{ env.IMAGE_NAME }}:test-${{ inputs.variant }}
          file: ${{ inputs.dockerfile }}

      - name: Set up Trivy
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db,aquasec/trivy-db,ghcr.io/aquasecurity/trivy-db
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db,aquasec/trivy-java-db,ghcr.io/aquasecurity/trivy-java-db
        run: |
          docker run --rm aquasec/trivy --version
          docker volume create trivy-db
          docker run --rm -e TRIVY_DB_REPOSITORY -e TRIVY_JAVA_DB_REPOSITORY -v trivy-db:/root/.cache/ aquasec/trivy image --download-db-only

      - name: Run Trivy vulnerability scanner for low severity cases
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            -v ./scan-results:/scan-results \
            -v trivy-db:/root/.cache/ \
            aquasec/trivy image \
              --pkg-types os,library \
              --ignore-unfixed \
              --severity UNKNOWN,LOW,MEDIUM \
              --format sarif \
              --output /scan-results/trivy-${{ inputs.variant }}-image-scan-low.sarif \
              ${{ env.IMAGE_NAME }}:test-${{ inputs.variant }}

      - name: Fix unicode characters in Trivy scan results
        run: |
          sudo chown -R $USER:$USER scan-results
          sed -i 's/\\u0026#39;/\x27/g' scan-results/trivy-${{ inputs.variant }}-image-scan-low.sarif
      
      - name: Upload Trivy low severity cases scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3.28.18
        with:
          sarif_file: scan-results/trivy-${{ inputs.variant }}-image-scan-low.sarif
          category: ${{ inputs.variant }}-image-scan-low-cases

      - name: Run Trivy vulnerability scanner
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            -v ./scan-results:/scan-results \
            -v trivy-db:/root/.cache/ \
            aquasec/trivy image \
              --exit-code 1 \
              --ignore-unfixed \
              --pkg-types os,library \
              --severity CRITICAL,HIGH \
              --format sarif \
              --output /scan-results/trivy-${{ inputs.variant }}-image-scan.sarif \
              --skip-files /usr/bin/geckodriver,/usr/local/bin/geckodriver \
              ${{ env.IMAGE_NAME }}:test-${{ inputs.variant }}

      - name: Fix unicode characters in Trivy scan results
        if: always()
        run: |
          sudo chown -R $USER:$USER scan-results
          sed -i 's/\\u0026#39;/\x27/g' scan-results/trivy-${{ inputs.variant }}-image-scan.sarif
      
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3.28.18
        if: always()
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: scan-results/trivy-${{ inputs.variant }}-image-scan.sarif
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: ${{ inputs.variant }}-image-scan

  validate-Dockerfile:
    uses: ./.github/workflows/hadolint.yml
    with:
      dockerfile: ${{ inputs.dockerfile }}
