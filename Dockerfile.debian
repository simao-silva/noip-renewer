FROM python:3.13.2-slim-bookworm@sha256:2847b593afb93fbf7788cf66b29febad3d4a048e8cba2195553f5b002273886c AS builder

SHELL ["/bin/bash", "-c"]

# Prevent Python from writing out pyc files
ENV PYTHONDONTWRITEBYTECODE=1

# Keep Python from buffering stdin/stdout
ENV PYTHONUNBUFFERED=1

# Disable any user interaction
ENV DEBIAN_FRONTEND=noninteractive

# Enable custom virtual environment
ENV VIRTUAL_ENV=/opt/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# renovate: datasource=pypi depName=pip versioning=pep440
ARG PIP_VERSION="25.0.1"

# renovate: datasource=repology depName=debian_12/gcc versioning=loose
ARG GCC_VERSION="4:12.2.0-3"

# renovate: datasource=repology depName=debian_12/glibc versioning=loose
ARG GLIBC_VERSION="2.36-9+deb12u9"

# renovate: datasource=repology depName=debian_12/libffi versioning=loose
ARG LIBFFI_VERSION="3.4.4-1"

# renovate: datasource=repology depName=debian_12/rustc versioning=loose
ARG RUSTC_VERSION="1.63.0+dfsg1-2"

# renovate: datasource=repology depName=debian_12/cargo versioning=loose
ARG CARGO_VERSION="0.66.0+ds1-1"

# renovate: datasource=repology depName=debian_12/openssl versioning=loose
ARG OPENSSL_VERSION="3.0.15-1~deb12u1"

ARG ARMV7_DEPS=" \
    gcc=${GCC_VERSION} \
    libc6-dev=${GLIBC_VERSION} \
    libffi-dev=${LIBFFI_VERSION} \
    rustc=${RUSTC_VERSION} \
    cargo=${CARGO_VERSION} \
    libssl-dev=${OPENSSL_VERSION} \
    "

# Install required packages
# hadolint ignore=DL3008
RUN apt-get update && \
    if [ "$(getconf LONG_BIT)" -eq 32 ]; then apt-get install -y --no-install-recommends ${ARMV7_DEPS}; fi && \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*

# Set the working directory
WORKDIR /app

# Add requirements file
COPY requirements.txt .

# Install requirements
RUN python3 -m venv "${VIRTUAL_ENV}" && \
    pip install --no-cache-dir --upgrade pip=="${PIP_VERSION}" && \
    pip install --no-cache-dir -r requirements.txt



FROM python:3.13.2-slim-bookworm@sha256:2847b593afb93fbf7788cf66b29febad3d4a048e8cba2195553f5b002273886c AS geckodriver

SHELL ["/bin/bash", "-c"]

# Disable any user interaction
ENV DEBIAN_FRONTEND=noninteractive

# renovate: datasource=repology depName=debian_12/curl versioning=loose
ARG CURL_VERSION="7.88.1-10+deb12u8"

# renovate: datasource=github-tags depName=mozilla/geckodriver
ARG GECKODRIVER_VERSION="v0.35.0"

# Install required packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl="${CURL_VERSION}" && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*

# Download geckodriver
RUN set -x && \
    if [ "$(uname --m)" == "x86_64" ]; then ARCH="linux64"; elif [ "$(uname --m)" == "aarch64" ]; then ARCH="linux-aarch64"; else ARCH="linux32"; fi && \
    curl -sSL -O https://github.com/mozilla/geckodriver/releases/download/"${GECKODRIVER_VERSION}"/geckodriver-"${GECKODRIVER_VERSION}"-"${ARCH}".tar.gz && \
    tar zxf geckodriver-"${GECKODRIVER_VERSION}"-"${ARCH}".tar.gz



FROM python:3.13.2-slim-bookworm@sha256:2847b593afb93fbf7788cf66b29febad3d4a048e8cba2195553f5b002273886c

# Disable any user interaction
ENV DEBIAN_FRONTEND=noninteractive

# renovate: datasource=pypi depName=pip versioning=pep440
ARG PIP_VERSION="25.0.1"

# renovate: datasource=repology depName=debian_12/firefox-esr versioning=loose
ARG FIREFOX_VERSION="128.7.0esr-1~deb12u1"

# Install required packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends firefox-esr="${FIREFOX_VERSION}" && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /tmp/* /var/lib/apt/lists/* /var/cache/apt/archives/* /var/tmp/* /usr/share/doc /usr/share/man

# Fix vulnerabilities reported by Trivy
RUN /usr/local/bin/pip install --upgrade pip=="${PIP_VERSION}" && \
    apt-get update && \
    apt-get upgrade -y libgnutls30 perl-base libexpat1 && \
    apt-get clean && \
    rm -rf /tmp/* /var/lib/apt/lists/* /var/cache/apt/archives/* /var/tmp/*

# Enable custom virtual environment
ENV VIRTUAL_ENV=/opt/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Copy dependencies from previous stage
COPY --from=builder $VIRTUAL_ENV $VIRTUAL_ENV

# Copy geckodriver from previous stage
COPY --from=geckodriver --chmod=755 /geckodriver /usr/local/bin/geckodriver

# Set the working directory
WORKDIR /app

# Copy and set the entrypoint bash script
COPY renew.py .
ENTRYPOINT ["python3", "renew.py"]
